"use client";
import React, { useState, useEffect } from "react";
import { Menu, X } from "lucide-react";
import { ModeToggle } from "@/components/toggle";
import Image from "next/image";

interface NavProps {
  id: string;
  label: string;
}

const Navigation = () => {
  const [isScrolled, setIsScrolled] = useState<boolean>(false);
    const [isMobileMenuOpen, setIsMobileMenuOpen] = useState<boolean>(false);
    const [activeSection, setActiveSection] = useState<String >("home");

  const navItems: NavProps[] = [
    { id: "home", label: "Home" },
    { id: "about", label: "About" },
    { id: "projects", label: "Projects" },
    { id: "contact", label: "Contact" },

    ];

    const sections = ["home", "about", "projects", "contact"];

    const handleNavClick = (section: string) => {
        setActiveSection(section);
    };

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 50);
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  return (
    <div>
      <nav
        className={`fixed top-0 w-full z-50 transition-all duration-300 ${
          isScrolled
            ? "bg-white/80 dark:bg-gray-900/80 backdrop-blur-md border-b border-gray-200 dark:border-gray-800"
            : "bg-transparent"
        }`}
      >
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <Image
              src="https://res.cloudinary.com/dk5mfu099/image/upload/v1750402070/ChatGPT_Image_Jun_19_2025_08_05_04_AM_mqyded.png"
              alt="portfolio-logo"
              width={60}
              height={40}
              className="rounded-full"
            />

            {/* Desktop Navigation */}
            <div className="hidden md:flex items-center space-x-8">
              {navItems.map((item) => (
                <button
                  onClick={handleNavClick}
                  className="relative text-sm font-medium transition-colors duration-200 text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 cursor-pointer"
                >
                  {item.label}
                  {activeSection === item.id && (
                    <div
                      className="absolute -bottom-1 left-0 right-0 h-0.5 bg-blue-600 dark:bg-blue-400"
                    />
                  )}
                </button>
              ))}
              <ModeToggle />
            </div>

            {/* Mobile Menu Button */}
            <div className="md:hidden flex items-center space-x-4">
              <ModeToggle />
              <button
                onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
                className="p-2 rounded-lg bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300"
              >
                {isMobileMenuOpen ? (
                  <X className="w-5 h-5" />
                ) : (
                  <Menu className="w-5 h-5" />
                )}
              </button>
            </div>
          </div>

          {/* Mobile Menu */}
          {isMobileMenuOpen && (
            <div className="md:hidden border-t border-gray-200 dark:border-gray-800 py-4">
              {navItems.map((item) => (
                <button
                  className="block w-full text-left py-2 px-4 text-sm font-medium transition-colors duration-200 ${
                     "
                >
                  {item.label}
                </button>
              ))}
            </div>
          )}
        </div>
      </nav>
    </div>
  );
};

export default Navigation;
